<!--
 ## 
 ## Copyright 2005 Sun Microsystems, Inc.
 ## 
 ## Licensed under the Apache License, Version 2.0 (the "License");
 ## you may not use this file except in compliance with the License.
 ## You may obtain a copy of the License at
 ## 
 ## 	http://www.apache.org/licenses/LICENSE-2.0
 ## 
 ## Unless required by applicable law or agreed to in writing, software
 ## distributed under the License is distributed on an "AS IS" BASIS,
 ## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ## See the License for the specific language governing permissions and
 ## limitations under the License.
 ## 
 -->

<project name="logstore" basedir="." default="all">

  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## ENVIRONMENT SETTINGS						-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <property name="top" location="../../../../../.."/>

  <property name="pkg-path" value="com/sun/jini/outrigger/${ant.project.name}"/>

  <!-- ##								-->
  <!-- ## Set java-source for use with the javac task:			-->
  <!-- ##								-->

  <property name="java-source" value="${pkg-path}/**/*.java" />
  
  <import file="${top}/build_common.xml"/>

  <!-- ##								-->
  <!-- ## Import the local settings if they exist, ignoring errors	-->
  <!-- ## (ie, optional=true) if the file is nonexistent.		-->
  <!-- ## 								-->

  <import file="build_local.xml" optional="true"/>


  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## TARGET: all							-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <target name="all"
          description=""
          depends="copy-pro-zip,
		   compile,
		   psepro-classes">

  </target>


  <!-- ################################################################ -->
  <!-- ##                                                               -->
  <!-- ## TARGET: clean                                                 -->
  <!-- ##                                                               -->
  <!-- ################################################################ -->

  <target name="clean"
          description="Removes all files and dirs created by the build."
          depends="clean.jre.ext">

    <delete dir="${build.classes}/${pkg-path}" quiet="true" />

    <delete dir="${build.classes.pse}" quiet="true" />

  </target>


  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## TARGET: this.jars						-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <!-- Note that outrigger-logstore.jar is not included in this list.	-->
  <!-- This is because there is a dependency on it in			-->
  <!-- outrigger/build.xml causing it to be built when outrigger.jar	-->
  <!-- is built. If outrigger-logstore.jar appeared here it would end	-->
  <!-- up being built twice. copy-pro-zip is not included for a		-->
  <!-- similar reason (there is a dependency to it in the 		-->
  <!-- outrigger-logstore.jar target below).				-->

  <target name="this.jars"
          depends="psepro-classes,
		   prebuilt-outrigger-logstore.jar">

  </target>


  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## TARGET: outrigger-logstore.jar				-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <target name="outrigger-logstore.jar"
          depends="tools,
		   copy-pro-zip,
		   create-outrigger-logstore.jar">

  </target>


  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## TARGET: extract-prebuilt-outrigger-logstore.jar		-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <target name="extract-prebuilt-outrigger-logstore.jar"
	  unless="have-psepro"
          description="In the event that the user does not have PSEpro,
		       outrigger-logstore.jar can be generated by first
		       extracting the PSEpro preprocessed classes from
		       the prebuilt jar file, which is what we will do
		       here."
          depends="">

    <delete dir="${build.classes.pse}/com/sun/jini/outrigger/logstore" quiet="true" failonerror="false"/>

    <unjar src="${lib}/prebuilt-outrigger-logstore.jar" dest="${build.classes.pse}"/>

    <delete dir="${build.classes.pse}/META-INF" quiet="true" failonerror="false"/>

  </target>


  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## TARGET: create-outrigger-logstore.jar				-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <target name="create-outrigger-logstore.jar"
	  if="psepro-zip"
	  description="If we do have access to pro.zip, we can generate 
		       outrigger-logstore.jar using the classes that we built."
          depends="">
  
    <antcall target="extract-prebuilt-outrigger-logstore.jar"/>

    <property name="outrigger-logstore.deps" location="${build.deps}/outrigger-logstore.deps" />
    
    <!-- ##								-->
    <!-- ## Run ClassDep.						-->
    <!-- ##								-->

    <java classname="com.sun.jini.tool.ClassDep"
          failonerror="true"
          output="${outrigger-logstore.deps}">
      
      <classpath refid="path.classdep"					/>
      <arg value="-cp"							/>
      <arg path="${build.classes}"					/>
      <arg value="-files"						/>
      <arg line="${jskprivate.include}"					/>

      <arg line="-in com.sun.jini.outrigger.logstore"			/>

      <arg value="com.sun.jini.outrigger.logstore.LogStore"		/>

    </java>

    <!-- ##								-->
    <!-- ## Generate the jar file.					-->
    <!-- ##								-->

    <delete file="${build.lib}/outrigger-logstore.jar" quiet="true" />

    <jar destfile="${build.lib}/outrigger-logstore.jar"
	 index="false"
	 manifest="${src.jini.manifest}/outrigger-logstore.mf">

      <fileset	dir="${build.classes}"
		includesfile="${outrigger-logstore.deps}" />
    </jar>

    <!-- ##								-->
    <!-- ## ...and add the PSE items to the jar file.			-->
    <!-- ##								-->

    <jar destfile="${build.lib}/outrigger-logstore.jar"
	 update="true"
	 index="false">
        
      <fileset	dir="${build.classes.pse}"
		includes="com/sun/jini/outrigger/logstore/**" />
    </jar>

  </target>


  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## TARGET: prebuilt-outrigger-logstore.jar			-->
  <!-- ##								-->
  <!-- ## If we don't have the PSEPro development tools, we'll just	-->
  <!-- ## copy the jar from the distribution's lib directory.  		-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <target name="prebuilt-outrigger-logstore.jar"
          depends="tools,
		   build-prebuilt-jar,
		   copy-prebuilt-jar">

  </target>
  

  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## TARGET: build-prebuilt-jar					-->
  <!-- ##								-->
  <!-- ## This target will build the prebuilt-outrigger-logstore.jar .	-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <target name="build-prebuilt-jar"
	  if="have-psepro"
          depends="">
  
    <delete file="${build.lib}/prebuilt-outrigger-logstore.jar" quiet="true" />

    <jar destfile="${build.lib}/prebuilt-outrigger-logstore.jar" 
	 index="false">

      <fileset	dir="${build.classes.pse}"
		includes="com/sun/jini/outrigger/logstore/**" />

    </jar>

  </target>


  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## TARGET: copy-prebuilt-jar					-->
  <!-- ##								-->
  <!-- ## This target will copy the prebuilt-outrigger-logstore.jar 	-->
  <!-- ## since PSEpro is not available.				-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <target name="copy-prebuilt-jar"
	  unless="have-psepro"
          depends="">
  
    <delete file="${build.lib}/prebuilt-outrigger-logstore.jar" quiet="true"/>

    <copy file="${lib}/prebuilt-outrigger-logstore.jar" todir="${build.lib}"/>

  </target>


  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## TARGET: copy-pro-zip						-->
  <!-- ##								-->
  <!-- ## If we don't have the PSEPro development tools, we'll just	-->
  <!-- ## copy pro.zip from the distribution's lib directory.  		-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <target name="copy-pro-zip"
	  if="psepro-zip"
          depends="setup-all">

    <copy file="${psepro-zip}" todir="${build.lib}"/>

  </target>


  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## TARGET: psepro-classes					-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <target name="psepro-classes" 
	  if="have-psepro"
          description="Builds the PSEpro classes, defined within build_local.xml"
          depends="setup-all">

    <!-- ##								-->
    <!-- ## If we got into this target, we must have PSEpro.  Therefore,-->
    <!-- ## we must also have build_local.xml, where the pse-classes	-->
    <!-- ## target is defined, so call pse-classes:			-->
    <!-- ##								-->

    <antcall target="pse-classes"/>

  </target>


  <!-- ################################################################ -->
  <!-- ##								-->
  <!-- ## TARGET: this.stubs						-->
  <!-- ##								-->
  <!-- ################################################################ -->

  <target name="this.stubs"
	  description="Just a dummy target.">

  </target>

</project>

