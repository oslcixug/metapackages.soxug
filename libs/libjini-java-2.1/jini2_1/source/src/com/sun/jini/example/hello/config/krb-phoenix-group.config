/* Configuration source file for Kerberos Phoenix */

import com.sun.jini.phoenix.InstantiatorPermission;

import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;

import net.jini.security.AuthenticationPermission;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.security.BasicProxyPreparer;

import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.ProxyTrustILFactory;
import net.jini.jeri.kerberos.KerberosServerEndpoint;

import java.util.Collections;

import javax.security.auth.kerberos.KerberosPrincipal;
import javax.security.auth.login.LoginContext;

import java.security.Permission;

com.sun.jini.phoenix {

    /* JAAS Login */
    loginContext = new LoginContext("com.sun.jini.Phoenix");

    /* Identify principals */
    private static phoenixUser = Collections.singleton(
        new KerberosPrincipal("${phoenixPrincipal}"));

    /* Exporters */
    private activationConstraints = 
	new BasicMethodConstraints( 
	    new InvocationConstraints( 
		new InvocationConstraint[] { Integrity.YES },
               null));

    private activationInstantiatorEndpoint = 
	KerberosServerEndpoint.getInstance(0);

    instantiatorExporter =
	new BasicJeriExporter(
	    activationInstantiatorEndpoint,
            new ProxyTrustILFactory(
		activationConstraints,
                InstantiatorPermission.class));

    /* Proxy Preparers */
    private mutualAuthenticationConstraints = 
	new BasicMethodConstraints( 
	    new InvocationConstraints( 
		new InvocationConstraint[] {
		    Integrity.YES,
                    ClientAuthentication.YES,
                    ServerAuthentication.YES,
                    new ServerMinPrincipal(phoenixUser)
                    },
                null));

    systemPreparer = 
	new BasicProxyPreparer( 
	    true,
            mutualAuthenticationConstraints,
            new Permission[] { 
		new AuthenticationPermission(
		    phoenixUser,
            	    phoenixUser,
                    "connect") 
		});

    monitorPreparer = systemPreparer;

}//end com.sun.jini.phoenix
